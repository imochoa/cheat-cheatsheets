# To start the docker daemon:
docker -d

# To start a container with an interactive shell:
docker run -ti <image-name> /bin/bash


# Run & mount SSH
docker run --rm -it -v "$SSH_AUTH_SOCK:$SSH_AUTH_SOCK" -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK <image-name>

# Run with security power
# https://stackoverflow.com/questions/19215177/how-to-solve-ptrace-operation-not-permitted-when-trying-to-attach-gdb-to-a-pro
# https://stackoverflow.com/questions/35987982/process-is-in-interruptible-sleep-how-to-find-out-what-it-is-waiting-for
```bash
docker run --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --security-opt apparmor=unconfined <image-name>
# or perhaps
docker run -it --rm --privileged --pid=host <imgname>
```

# To "shell" into a running container (docker-1.3+):
docker exec -ti <container-name> bash

# To inspect a running container:
docker inspect <container-name> (or <container-id>)

# To get the process ID for a container:
docker inspect --format {{.State.Pid}} <container-name-or-id>

# To list (and pretty-print) the current mounted volumes for a container:
docker inspect --format='{{json .Volumes}}' <container-id> | python -mjson.tool

# To copy files/folders between a container and your host:
docker cp foo.txt mycontainer:/foo.txt

# To list currently running containers:
docker ps

# To list all containers:
docker ps -a

# To remove all stopped containers:
docker rm $(docker ps -qa)

# To list all images:
docker images

# To remove all untagged images:
docker rmi $(docker images | grep "^<none>" | awk "{print $3}")

# To remove all volumes not used by at least one container:
docker volume prune


# Filtering options
docker image ls --filter
  -f, --filter value    Filter output based on conditions provided (default [])
                        - dangling=(true|false)
                        - label=<key> or label=<key>=<value>
                        - before=(<image-name>[:tag]|<image-id>|<image@digest>)
                        - since=(<image-name>[:tag]|<image-id>|<image@digest>)
                        - reference=(pattern of an image reference)

-f "reference=*/*latest"

jq might be easier
Rather than remember the syntax of these, json with jq can be much easier. 
as in docker image ls --format="{{json .}}" | jq 'select( (.Tag=="latest") or (.Tag="<none>"))'. 
You can use --format="{{json .}}" with the other docker ls commands.


# Alpine
# create a new user with an entrypoint.sh
# https://gitlab.com/manuel_wagesreither/bora-proj/-/blob/master/docker/entrypoint.sh
#
# another example
# https://github.com/miy4/docker-plantuml/blob/98f572943040d36896511c3a4327a1aba1a4e6ff/entrypoint
    git push --set-upstream origin ALGO-2165_testing-improvements

# Shallow git clone to a commit
```
git clone --depth=1 git@github.com:user/repo.git /outdir
cd /outdir
git fetch --depth 1 origin 41335a40d587145db0719af4a89a9e1dc3a86b5f
git checkout FETCH_HEAD
```
# or
```
git init
git remote add origin git@github.com:user/repo.git
git fetch --depth 1 origin <commit>
git checkout FETCH_HEAD
```
